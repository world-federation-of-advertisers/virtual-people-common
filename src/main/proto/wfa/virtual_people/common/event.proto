// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa_virtual_people;

import "wfa/virtual_people/common/demographic.proto";
import "wfa/virtual_people/common/geo_location.proto";
import "wfa/virtual_people/common/label.proto";
import "wfa/virtual_people/common/panel_data.proto";

option java_package = "org.wfanet.virtualpeople.common";
option java_multiple_files = true;

// EventId is a unique identifier across all event data provider logs.
message EventId {
  // The publisher of the log that this event comes from.
  // Need this to guarantee unique event id across publishers.
  optional string publisher = 1;

  // The publisher specific event id. Unique within all logs of the
  // publisher.
  optional string id = 2;

  // The fingerprint of id. Only set and used in Labeler.
  optional uint64 id_fingerprint = 3;
}

// Represents information on a specific user id. This data will be attached
// to event before labeling.
message UserInfo {
  optional string user_id = 1;

  // The profile version that this data is extracted from.
  // For example, for daily snapshots the date string can be used
  // as the version.
  // This is intended for monitoring and debugging purposes.
  optional string profile_version = 2;

  // Demo data for the given user id.
  optional DemoInfo demo = 3;

  // Inferred home geographic information.
  optional GeoLocation home_geo = 4;

  // Creation or initialization time of the user id, in microseconds
  // since epoch.
  int64 creation_time_usec = 5;

  // The fingerprint of user_id. Only set and used in Labeler.
  optional uint64 user_id_fingerprint = 6;
}

// Represents info for all user ids associated with a specific event.
message ProfileInfo {
  // Information for email id.
  optional UserInfo email_user_info = 1;

  // Information for phone id.
  optional UserInfo phone_user_info = 2;

  // Information for logged-in id if the event has one.
  // The id space may differ from publisher to publisher. Need to use together
  // with the publisher field in EventId.
  optional UserInfo logged_in_id_user_info = 4;

  // Information for logged-out id if the event has one.
  // The id space may differ from publisher to publisher. Need to use together
  // with the publisher field in EventId.
  optional UserInfo logged_out_id_user_info = 5;

  // About proprietary_id_space_NNN_user_info below:
  // These are intended to provide a way to digest arbitrary identifiers that
  // don't fit semantically into the existing fields, but it is not yet
  // justified to add dedicated fields for them.
  optional UserInfo proprietary_id_space_1_user_info = 3;
  optional UserInfo proprietary_id_space_2_user_info = 6;
  optional UserInfo proprietary_id_space_3_user_info = 7;
  optional UserInfo proprietary_id_space_4_user_info = 8;
  optional UserInfo proprietary_id_space_5_user_info = 9;
  optional UserInfo proprietary_id_space_6_user_info = 10;
  optional UserInfo proprietary_id_space_7_user_info = 11;
  optional UserInfo proprietary_id_space_8_user_info = 12;
  optional UserInfo proprietary_id_space_9_user_info = 13;
  optional UserInfo proprietary_id_space_10_user_info = 14;
}

// Represents input to the labeler.
// Only contains attributes needed for labeling, including attributes
// extracted from logs and enriched by profile data.
message LabelerInput {
  // Uniquely identifies the event across publishers.
  // This is intended as a key to join with other data. It is not used during
  // labeling.
  optional EventId event_id = 1;

  // Required. When this event occurs in microseconds since epoch.
  optional int64 timestamp_usec = 2;

  // TODO(@wliue): Deprecate user_agent when all usages are migrated.
  // User agent string. Labeler uses this to compute device type.
  optional string user_agent = 3;

  // Geo data.
  optional GeoLocation geo = 4;

  // Profile data for all user ids.
  optional ProfileInfo profile_info = 5;

  // Device type string. Computed from user agent string using a library
  // function.
  optional string device_type = 6;
}

// LogEvent contains all attributes in LabelerInput, as well as other
// attributes extracted from logs.
message LogEvent {
  // Currently there is no other attribute decided yet.
  // May duplicate labeler_input fields explicitly when other attributes
  // are added.
  optional LabelerInput labeler_input = 1000;
}

// LogEvent with labels.
// This is used for data provider log.
message DataProviderEvent {
  optional LogEvent log_event = 1;

  // Labels. One entry per labeling (by one model).
  // It is possible that the same model is used in multiple labelings and
  // results in multiple entries.
  repeated MetaLabelerOutput labels = 2;
}

// LogEvent with labels and panel data.
// This is used for research, model training and validation.
message ResearchEvent {
  optional LogEvent log_event = 1;

  // Labels. One entry per labeling (by one model).
  // It is possible that the same model is used in multiple labelings and
  // results in multiple entries.
  repeated MetaLabelerOutput labels = 2;

  // Panel data for this event. One entry per panel.
  // A panel data provider may have multiple panels and could add one entry
  // for each panel.
  repeated PanelData panel_data = 3;
}
